"""
Django settings for tradehive project.

Generated by 'django-admin startproject' using Django 5.1.4.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

import os
from datetime import timedelta
from pathlib import Path

# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = "django-insecure-nm88drrl4wc_w5&ciell2l&b9d%mg6!061hmwhpnvp%lb%d3&g"

with open(os.path.join(BASE_DIR, "private.pem"), "r") as private_file:
    SIGNING_KEY = private_file.read()

with open(os.path.join(BASE_DIR, "public.pem"), "r") as public_file:
    VERIFYING_KEY = public_file.read()

# JWT의 보안 설정
SIMPLE_JWT = {
    "SIGNING_KEY": SIGNING_KEY,  # 암호화 키
    "VERIFYING_KEY": VERIFYING_KEY,  # 복호화 키
    "ACCESS_TOKEN_LIFETIME": timedelta(minutes=15),  # access token 유효기간
    "REFRESH_TOKEN_LIFETIME": timedelta(days=1),  # refresh token 유효기간
    "ALGORITHM": "RS256",  # 암호화 알고리즘
    "AUTH_HEADER_TYPES": ("Bearer",),  # 헤더 타입
    "BLACKLIST_AFTER_ROTATION": True,  # refresh token 갱신시 기존 토큰 블랙리스트 추가 여부
    "ROTATE_REFRESH_TOKENS": True,  # refresh token 갱신 여부
    "ISSUER": "tradehive",  # 발급자
    "LEEWAY": 30,  # 토큰 만료시간
}

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = []


# Application definition

INSTALLED_APPS = [
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",
    "corsheaders",
    "django_extensions",
    "django_otp",
    "django_otp.plugins.otp_totp",
    "django_celery_beat",
    "channels",
    "rest_framework",
    "rest_framework_simplejwt",
    "rest_framework_simplejwt.token_blacklist",
    "users",
    "orders",
    "markets",
]

MIDDLEWARE = [
    "corsheaders.middleware.CorsMiddleware",
    "django.middleware.security.SecurityMiddleware",
    "django.contrib.sessions.middleware.SessionMiddleware",
    "django.middleware.common.CommonMiddleware",
    "django.middleware.csrf.CsrfViewMiddleware",
    "django.contrib.auth.middleware.AuthenticationMiddleware",
    "django_otp.middleware.OTPMiddleware",
    "django.contrib.messages.middleware.MessageMiddleware",
    "django.middleware.clickjacking.XFrameOptionsMiddleware",
    "tradehive.middleware.RateLimitMiddleware",
]

ROOT_URLCONF = "tradehive.urls"

TEMPLATES = [
    {
        "BACKEND": "django.template.backends.django.DjangoTemplates",
        "DIRS": [],
        "APP_DIRS": True,
        "OPTIONS": {
            "context_processors": [
                "django.template.context_processors.debug",
                "django.template.context_processors.request",
                "django.contrib.auth.context_processors.auth",
                "django.contrib.messages.context_processors.messages",
            ],
        },
    },
]

WSGI_APPLICATION = "tradehive.wsgi.application"


# redis

CACHES = {
    "default": {
        "BACKEND": "django_redis.cache.RedisCache",
        "LOCATION": f'redis://{os.getenv("REDIS_HOST")}:{os.getenv("REDIS_PORT")}',
        "OPTIONS": {
            "CLIENT_CLASS": "django_redis.client.DefaultClient",
        },
    }
}


# channels

ASGI_APPLICATION = "tradehive.routing.application"

# channel을 사용하기 위해 layer를 설정
# channel: 사용자와 서버간의 실시간 양방향 통신을 위한 라이브러리
# layer: channel이 사용하는 메시지 브로커
CHANNEL_LAYERS = {
    "default": {
        "BACKEND": "channels_redis.core.RedisChannelLayer",
        "CONFIG": {
            "hosts": [(os.getenv("REDIS_HOST"), os.getenv("REDIS_PORT"))],
        },
    },
}


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": os.getenv("POSTGRES_DB"),
        "USER": os.getenv("POSTGRES_USER"),
        "PASSWORD": os.getenv("POSTGRES_PASSWORD"),
        "HOST": os.getenv("POSTGRES_HOST"),
        "PORT": os.getenv("POSTGRES_PORT"),
        "OPTIONS": {
            "sslmode": os.getenv("POSTGRES_SSLMODE"),  # sslmode: 연결을 위한 SSL 모드
        },
    }
}

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-field

DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"


# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]

AUTH_USER_MODEL = "users.CustomUser"


# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/5.1/howto/static-files/

STATIC_URL = "static/"


# https

SECURE_SSL_REDIRECT = True  # https로 리다이렉트
SECURE_PROXY_SSL_HEADER = ("HTTP_X_FORWARDED_PROTO", "https")  # 프록시 서버에서 https로 전달받았을 때

# HSTS: HTTPS Strict Transport Security, HTTPS로만 통신하도록 강제
SECURE_HSTS_SECONDS = 1 * 12 * 30 * 24 * 60 * 60  # 1년
SECURE_HSTS_INCLUDE_SUBDOMAINS = True  # 서브도메인에도 HSTS 적용
SECURE_HSTS_PRELOAD = True  # HSTS 프리로드 목록에 추가


# CORS

CORS_ALLOW_ALL_ORIGINS = True  # TODO: 허가된 도메인만 허용하도록 변경
CORS_ALLOWED_ORIGINS = []

CORS_ALLOW_CREDENTIALS = True  # 쿠키 전송 허용
CORS_ALLOW_HEADERS = [
    "authorization",  # JWT 토큰
]


# rest_framework

REST_FRAMEWORK = {
    "DEFAULT_AUTHENTICATION_CLASSES": ("rest_framework_simplejwt.authentication.JWTAuthentication",),
    # 주의: 아래와 같은 throttle 설정은 middleware를 통과하여 뷰나 뷰셋에 적용되므로 만약 middleware가 더 빠르게 요청을 처리한다면 throttle 설정이 무의미해질 수 있음
    "DEFAULT_THROTTLE_CLASSES": (
        "rest_framework.throttling.UserRateThrottle",  # 인증된 사용자의 요청 제한
        "rest_framework.throttling.AnonRateThrottle",  # 비인증 사용자의 요청 제한
    ),
    "DEFAULT_THROTTLE_RATES": {
        "user": "1000/day",  # 인증된 사용자의 요청 제한
        "anon": "100/hour",  # 비인증 사용자의 요청 제한
    },
}


# celery

CELERY_BROKER_URL = os.getenv("CELERY_BROKER_URL")
CELERY_RESULT_BACKEND = os.getenv("CELERY_RESULT_BACKEND")

CELERY_ACCEPT_CONTENT = ["json"]  # 요청을 받을 수 있는 content type
CELERY_TASK_SERIALIZER = "json"  # task 직렬화
